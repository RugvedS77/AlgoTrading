# from datetime import datetime
# from typing import List, Dict
# from sqlalchemy.orm import Session
# from models.agent_results_model import AgentResults
# import google.generativeai as genai
# import os

# # Configure Google Gemini API
# genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# # Choose a Gemini model (you can switch to "gemini-1.5-flash" for speed)
# GEMINI_MODEL = "gemini-1.5-flash"


# class ExplainerAgent:
#     """
#     Fetches stored outputs from the agents (PostgreSQL)
#     and generates professional explanations using Google Gemini.
#     """

#     def __init__(self, db: Session):
#         self.db = db

#     # ---------- Fetch Data ----------
#     def get_all_results(self) -> List[AgentResults]:
#         """Return all stored agent outputs (most recent first)."""
#         return (
#             self.db.query(AgentResults)
#             .order_by(AgentResults.created_at.desc())
#             .limit(3)
#             .all()
#         )

#     # ---------- Build Prompt ----------
#     def _build_prompt(self, result: AgentResults) -> str:
#         return f"""
# You are a skilled stock market analyst.  
# Explain the agents'outputs in **clear, simple, yet technically accurate language** so that both finance students and retail investors can understand.  

# Follow this structure and keep it concise but insightful:

# ### Analysis of Agent Outputs

# *Overall Sentiment:*  
# - State whether the outlook is Bullish, Bearish, or Neutral.  
# - Add 1-2 lines on why (e.g., trend strength, price momentum, or market signals).

# *Signal Agent:*  
# - Explain the recommendation (Buy, Sell, Hold).  
# - Mention confidence score and technical indicators used (like RSI, moving averages).  
# - Use simple terms (e.g., "RSI shows the stock is overbought, meaning price might fall").

# *Risk Filter:*  
# - Comment on volatility and potential drawdowns.  
# - Explain what the numbers mean in practice (e.g., "higher volatility means price swings are larger and riskier").  
# - Make it clear whether the stock is safe for cautious investors.

# *Capital Allocator:*  
# - Describe how much capital is suggested for this stock.  
# - Explain position sizing in plain words (e.g., "investing 20% means for every ₹100, you put ₹20 here").  
# - Add risk-reward balance.

# *Conclusion:*  
# - Summarize how all signals align.  
# - Give a practical takeaway (e.g., "Good short-term opportunity, but risky for long-term holders").  

# Data provided by agents:
# - Signal: {result.signal_output}
# - Risk: {result.risk_output}
# - Allocator: {result.allocator_output}
# """
# agents/explainer_agent.py

from datetime import datetime
from typing import List, Dict
from sqlalchemy.orm import Session
from models.agent_results_model import AgentResults
import google.generativeai as genai
import json
import os

# Configure Google Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
GEMINI_MODEL = "gemini-1.5-flash"


class ExplainerAgent:
    """
    Fetches stored outputs from the advanced agent pipeline (PostgreSQL)
    and generates a professional "meta-analysis" using Google Gemini.
    """

    def __init__(self, db: Session):
        self.db = db

    def get_all_results(self) -> List[AgentResults]:
        """Return the 3 most recent agent outputs."""
        return (
            self.db.query(AgentResults)
            .order_by(AgentResults.created_at.desc())
            .limit(3)
            .all()
        )

    # MODIFICATION: The entire prompt has been rewritten for the new agent outputs
    def _build_prompt(self, result: AgentResults) -> str:
        # Pretty-print JSON for better readability in the prompt
        signal_json = json.dumps(result.signal_output, indent=2)
        allocator_json = json.dumps(result.allocator_output, indent=2)
        risk_json = json.dumps(result.risk_output, indent=2)

        return f"""
You are an expert financial analyst providing a "meta-analysis" of a trading decision generated by a team of AI agents.
Your task is to synthesize the outputs from the Signal, Capital Allocator, and Risk Supervisor agents into a single, cohesive, and insightful explanation.

**Follow this structure exactly:**

### Executive Summary
- **Final Decision:** Start with the final verdict from the Risk Supervisor (e.g., PROCEED, REJECT).
- **Core Rationale:** In 1-2 sentences, summarize the most critical reason for this decision, combining insights from all three agents.

### 1. Market & Signal Analysis (Signal Agent)
- **Market Regime:** What was the detected market regime (e.g., VOLATILE_TRENDING)? Explain what this means in simple terms.
- **Signal Breakdown:** Explain the agent's final signal (BUY/SELL/HOLD). How did the underlying factors (trend, news, price prediction) and the market regime influence this signal? Mention the final `combined_score`.

### 2. Trade Structuring & Sizing (Capital Allocator)
- **Position Sizing Model:** Explain that the allocation is based on the Kelly Criterion, a model for maximizing long-term growth.
- **Key Inputs:** Translate the key inputs of the formula into plain English. For example: "The model's confidence of {result.signal_output.get('confidence', 0):.0%} was used as the probability of success. The trade's structure, with a potential reward of X and a risk of Y (based on the stop-loss), resulted in a Win/Loss Ratio of Z."
- **Allocation:** Explain the final proposed allocation (e.g., "{result.allocator_output.get('allocation_pct_of_equity', 0):.2%}") and what the Kelly Fraction suggests about the trade's aggressiveness. Mention the suggested stop-loss.

### 3. Final Supervisory Review (Risk Supervisor)
- **Verdict & Rationale:** Summarize the supervisor's final verdict and its core rationale.
- **Key Factors:** List the main points from `key_positive_factors` and `key_risks_and_concerns` that the supervisor highlighted as most important.

### Overall Conclusion
- **Synthesize:** Provide a final 2-3 sentence conclusion that brings everything together. Is there a consensus among the agents? Are there any lingering conflicts or warnings a trader should be aware of?

---
**RAW AGENT DATA:**

**Signal Agent Output:**```json{signal_json}```
**Signal Agent Output:**```json{allocator_json}```
**Signal Agent Output:**```json{risk_json}```
"""
    # ---------- Generate Explanation ----------
    def generate_explanation(self, result: AgentResults) -> str:
        prompt = self._build_prompt(result)
        try:
            model = genai.GenerativeModel(GEMINI_MODEL)
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            return f"[Error generating explanation: {e}]"

    def explain_all(self) -> Dict:
        """Generate explanations for all stored agent runs."""
        records = self.get_all_results()
        explanations = []

        for r in records:
            explanations.append({
                "run_id": r.id,
                "ticker": r.ticker,
                "created_at": r.created_at.isoformat(),
                "explanation": self.generate_explanation(r),
            })

        return {"explanations": explanations}